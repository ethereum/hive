version: 2.1
orbs:
  go: circleci/go@1.5.0

parameters:
  rust-ci:
    type: boolean
    default: false  
  hivesim-rs-ci:
    type: boolean
    default: false

jobs:
  # This job builds the hive executable and stores it in the workspace.
  build:
    docker:
      - image: cimg/go:1.21
    steps:
      # Build it.
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache
      - run: {command: 'go build -ldflags="-s -extldflags=-static" -tags "osusergo netgo static_build" .'}
      # Store the executable.
      - persist_to_workspace:
          root: .
          paths: ["hive"]

  # This job runs the smoke test simulations. This requires a virtual
  # machine instead of the container-based build environment because
  # hive needs to be able to talk to the docker containers it creates.
  smoke-tests:
    machine:
      image: default
    steps:
      - checkout
      - attach_workspace: {at: "/tmp/build"}
      - run:
          command: "/tmp/build/hive --sim=smoke/genesis --client=go-ethereum"
      - run:
          command: "/tmp/build/hive --sim=smoke/network --client=go-ethereum"

  # This job also runs the smoke test simulations, but against a remote dockerd.
  smoke-tests-remote-docker:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - attach_workspace: {at: "/tmp/build"}
      - setup_remote_docker
      - run:
          command: "/tmp/build/hive --sim=smoke/genesis --client=go-ethereum --loglevel 5"
      - run:
          command: "/tmp/build/hive --sim=smoke/network --client=go-ethereum --loglevel 5"

  # This job runs the go unit tests.
  go-test:
    docker:
      - image: cimg/go:1.21
    steps:
      # Get the source.
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache
      # Run the tests.
      - run:
          name: "hive module tests"
          command: "go test -cover ./..."
      - run:
          name: "hiveproxy module tests"
          command: "go test -cover ./..."
          working_directory: "./hiveproxy"
      - run:
          name: "Compile Go simulators"
          command: ".circleci/compile-simulators.sh"
  # this makes sure the rust code is good
  hivesim-rs:
    docker:
      - image: cimg/rust:1.81.0
    steps:
      - checkout
      - run:
          name: Install rustfmt
          command: rustup component add rustfmt
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Install Clang
          command: sudo apt update && sudo apt-get install clang -y
      - run:
          name: "Lint"
          command: "cd hivesim-rs && cargo fmt --all -- --check"
      - run:
          name: "Build"
          command: "cd hivesim-rs && cargo clippy --all --all-targets --all-features --no-deps -- --deny warnings"
      - run:
          name: "Test hivesim-rs"
          command: "cd hivesim-rs && cargo test --workspace -- --nocapture"    
  rust-simulators:
    docker:
      - image: cimg/rust:1.81.0
    steps:
      - checkout
      - run:
          name: Install rustfmt
          command: rustup component add rustfmt
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Install Clang
          command: sudo apt update && sudo apt-get install clang -y
      - run:
          name: "Lint, build, test Rust simulators"
          command: ".circleci/rust-simulators.sh"          

workflows:
  main:
    jobs:
      - go-test
      - build
      - smoke-tests:
          requires: ["build"]
      - smoke-tests-remote-docker:
          requires: ["build"]
  rust-simulator-jobs:
    when: << pipeline.parameters.rust-ci >>
    jobs:
      - rust-simulators
  hivesim-rs-jobs:
    when: << pipeline.parameters.hivesim-rs-ci >>
    jobs:
      - hivesim-rs
