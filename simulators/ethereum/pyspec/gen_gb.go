// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*genesisBlockUnmarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g genesisBlock) MarshalJSON() ([]byte, error) {
	type genesisBlock struct {
		Coinbase      common.Address        `json:"coinbase"`
		Difficulty    *math.HexOrDecimal256 `json:"difficulty"`
		GasLimit      math.HexOrDecimal64   `json:"gasLimit"`
		Timestamp     *math.HexOrDecimal256 `json:"timestamp"`
		ExtraData     hexutil.Bytes         `json:"extraData"`
		MixHash       common.Hash           `json:"mixHash"`
		Nonce         types.BlockNonce      `json:"nonce"`
		BaseFee       *math.HexOrDecimal256 `json:"baseFeePerGas"`
		BlobGasUsed   *math.HexOrDecimal64  `json:"blobGasUsed"`
		ExcessBlobGas *math.HexOrDecimal64  `json:"excessBlobGas"`
		Hash          common.Hash           `json:"hash"`
	}
	var enc genesisBlock
	enc.Coinbase = g.Coinbase
	enc.Difficulty = (*math.HexOrDecimal256)(g.Difficulty)
	enc.GasLimit = math.HexOrDecimal64(g.GasLimit)
	enc.Timestamp = (*math.HexOrDecimal256)(g.Timestamp)
	enc.ExtraData = g.ExtraData
	enc.MixHash = g.MixHash
	enc.Nonce = g.Nonce
	enc.BaseFee = (*math.HexOrDecimal256)(g.BaseFee)
	enc.BlobGasUsed = (*math.HexOrDecimal64)(g.BlobGasUsed)
	enc.ExcessBlobGas = (*math.HexOrDecimal64)(g.ExcessBlobGas)
	enc.Hash = g.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *genesisBlock) UnmarshalJSON(input []byte) error {
	type genesisBlock struct {
		Coinbase      *common.Address       `json:"coinbase"`
		Difficulty    *math.HexOrDecimal256 `json:"difficulty"`
		GasLimit      *math.HexOrDecimal64  `json:"gasLimit"`
		Timestamp     *math.HexOrDecimal256 `json:"timestamp"`
		ExtraData     *hexutil.Bytes        `json:"extraData"`
		MixHash       *common.Hash          `json:"mixHash"`
		Nonce         *types.BlockNonce     `json:"nonce"`
		BaseFee       *math.HexOrDecimal256 `json:"baseFeePerGas"`
		BlobGasUsed   *math.HexOrDecimal64  `json:"blobGasUsed"`
		ExcessBlobGas *math.HexOrDecimal64  `json:"excessBlobGas"`
		Hash          *common.Hash          `json:"hash"`
	}
	var dec genesisBlock
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.Difficulty != nil {
		g.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.GasLimit != nil {
		g.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.Timestamp != nil {
		g.Timestamp = (*big.Int)(dec.Timestamp)
	}
	if dec.ExtraData != nil {
		g.ExtraData = *dec.ExtraData
	}
	if dec.MixHash != nil {
		g.MixHash = *dec.MixHash
	}
	if dec.Nonce != nil {
		g.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		g.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.BlobGasUsed != nil {
		g.BlobGasUsed = (*uint64)(dec.BlobGasUsed)
	}
	if dec.ExcessBlobGas != nil {
		g.ExcessBlobGas = (*uint64)(dec.ExcessBlobGas)
	}
	if dec.Hash != nil {
		g.Hash = *dec.Hash
	}
	return nil
}
