// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/beacon/engine"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*engineNewPayloadUnmarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e engineNewPayload) MarshalJSON() ([]byte, error) {
	type engineNewPayload struct {
		Payload             *engine.ExecutableData `json:"payload"`
		Version             math.HexOrDecimal64    `json:"version"`
		BlobVersionedHashes []common.Hash          `json:"blobVersionedHashes"`
	}
	var enc engineNewPayload
	enc.Payload = e.Payload
	enc.Version = math.HexOrDecimal64(e.Version)
	enc.BlobVersionedHashes = e.BlobVersionedHashes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *engineNewPayload) UnmarshalJSON(input []byte) error {
	type engineNewPayload struct {
		Payload             *engine.ExecutableData `json:"payload"`
		Version             *math.HexOrDecimal64   `json:"version"`
		BlobVersionedHashes []common.Hash          `json:"blobVersionedHashes"`
	}
	var dec engineNewPayload
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Payload != nil {
		e.Payload = dec.Payload
	}
	if dec.Version != nil {
		e.Version = uint64(*dec.Version)
	}
	if dec.BlobVersionedHashes != nil {
		e.BlobVersionedHashes = dec.BlobVersionedHashes
	}
	return nil
}
