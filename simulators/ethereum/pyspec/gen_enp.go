// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/beacon/engine"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*engineNewPayloadUnmarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e engineNewPayload) MarshalJSON() ([]byte, error) {
	type engineNewPayload struct {
		Payload               *engine.ExecutableData `json:"executionPayload"`
		BlobVersionedHashes   []common.Hash          `json:"expectedBlobVersionedHashes"`
		ParentBeaconBlockRoot *common.Hash           `json:"parentBeaconBlockRoot"`
		Version               math.HexOrDecimal64    `json:"version"`
		ErrorCode             int64                  `json:"errorCode,string"`
	}
	var enc engineNewPayload
	enc.Payload = e.Payload
	enc.BlobVersionedHashes = e.BlobVersionedHashes
	enc.ParentBeaconBlockRoot = e.ParentBeaconBlockRoot
	enc.Version = math.HexOrDecimal64(e.Version)
	enc.ErrorCode = e.ErrorCode
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *engineNewPayload) UnmarshalJSON(input []byte) error {
	type engineNewPayload struct {
		Payload               *engine.ExecutableData `json:"executionPayload"`
		BlobVersionedHashes   []common.Hash          `json:"expectedBlobVersionedHashes"`
		ParentBeaconBlockRoot *common.Hash           `json:"parentBeaconBlockRoot"`
		Version               *math.HexOrDecimal64   `json:"version"`
		ErrorCode             *int64                 `json:"errorCode,string"`
	}
	var dec engineNewPayload
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Payload != nil {
		e.Payload = dec.Payload
	}
	if dec.BlobVersionedHashes != nil {
		e.BlobVersionedHashes = dec.BlobVersionedHashes
	}
	if dec.ParentBeaconBlockRoot != nil {
		e.ParentBeaconBlockRoot = dec.ParentBeaconBlockRoot
	}
	if dec.Version != nil {
		e.Version = uint64(*dec.Version)
	}
	if dec.ErrorCode != nil {
		e.ErrorCode = *dec.ErrorCode
	}
	return nil
}
