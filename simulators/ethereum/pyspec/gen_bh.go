// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package main

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*blockHeaderUnmarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b blockHeader) MarshalJSON() ([]byte, error) {
	type blockHeader struct {
		ParentHash      common.Hash           `json:"parentHash"`
		UncleHash       common.Hash           `json:"uncleHash"`
		Coinbase        common.Address        `json:"coinbase"`
		StateRoot       common.Hash           `json:"stateRoot"`
		TransactionTrie common.Hash           `json:"transactionTrie"`
		ReceiptTrie     common.Hash           `json:"receiptTrie"`
		Bloom           types.Bloom           `json:"bloom"`
		Difficulty      *math.HexOrDecimal256 `json:"difficulty"`
		Number          *math.HexOrDecimal256 `json:"number"`
		GasLimit        math.HexOrDecimal64   `json:"gasLimit"`
		GasUsed         math.HexOrDecimal64   `json:"gasUsed"`
		Timestamp       *math.HexOrDecimal256 `json:"timestamp"`
		ExtraData       hexutil.Bytes         `json:"extraData"`
		MixHash         common.Hash           `json:"mixHash"`
		Nonce           types.BlockNonce      `json:"nonce"`
		BaseFee         *math.HexOrDecimal256 `json:"baseFeePerGas"`
		WithdrawalsRoot common.Hash           `json:"withdrawalsRoot"`
		BlobGasUsed     *math.HexOrDecimal64  `json:"blobGasUsed"`
		ExcessBlobGas   *math.HexOrDecimal64  `json:"excessBlobGas"`
		BeaconRoot      *common.Hash          `json:"parentBeaconBlockRoot"`
		Hash            common.Hash           `json:"hash"`
	}
	var enc blockHeader
	enc.ParentHash = b.ParentHash
	enc.UncleHash = b.UncleHash
	enc.Coinbase = b.Coinbase
	enc.StateRoot = b.StateRoot
	enc.TransactionTrie = b.TransactionTrie
	enc.ReceiptTrie = b.ReceiptTrie
	enc.Bloom = b.Bloom
	enc.Difficulty = (*math.HexOrDecimal256)(b.Difficulty)
	enc.Number = (*math.HexOrDecimal256)(b.Number)
	enc.GasLimit = math.HexOrDecimal64(b.GasLimit)
	enc.GasUsed = math.HexOrDecimal64(b.GasUsed)
	enc.Timestamp = (*math.HexOrDecimal256)(b.Timestamp)
	enc.ExtraData = b.ExtraData
	enc.MixHash = b.MixHash
	enc.Nonce = b.Nonce
	enc.BaseFee = (*math.HexOrDecimal256)(b.BaseFee)
	enc.WithdrawalsRoot = b.WithdrawalsRoot
	enc.BlobGasUsed = (*math.HexOrDecimal64)(b.BlobGasUsed)
	enc.ExcessBlobGas = (*math.HexOrDecimal64)(b.ExcessBlobGas)
	enc.BeaconRoot = b.BeaconRoot
	enc.Hash = b.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *blockHeader) UnmarshalJSON(input []byte) error {
	type blockHeader struct {
		ParentHash      *common.Hash          `json:"parentHash"`
		UncleHash       *common.Hash          `json:"uncleHash"`
		Coinbase        *common.Address       `json:"coinbase"`
		StateRoot       *common.Hash          `json:"stateRoot"`
		TransactionTrie *common.Hash          `json:"transactionTrie"`
		ReceiptTrie     *common.Hash          `json:"receiptTrie"`
		Bloom           *types.Bloom          `json:"bloom"`
		Difficulty      *math.HexOrDecimal256 `json:"difficulty"`
		Number          *math.HexOrDecimal256 `json:"number"`
		GasLimit        *math.HexOrDecimal64  `json:"gasLimit"`
		GasUsed         *math.HexOrDecimal64  `json:"gasUsed"`
		Timestamp       *math.HexOrDecimal256 `json:"timestamp"`
		ExtraData       *hexutil.Bytes        `json:"extraData"`
		MixHash         *common.Hash          `json:"mixHash"`
		Nonce           *types.BlockNonce     `json:"nonce"`
		BaseFee         *math.HexOrDecimal256 `json:"baseFeePerGas"`
		WithdrawalsRoot *common.Hash          `json:"withdrawalsRoot"`
		BlobGasUsed     *math.HexOrDecimal64  `json:"blobGasUsed"`
		ExcessBlobGas   *math.HexOrDecimal64  `json:"excessBlobGas"`
		BeaconRoot      *common.Hash          `json:"parentBeaconBlockRoot"`
		Hash            *common.Hash          `json:"hash"`
	}
	var dec blockHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.UncleHash != nil {
		b.UncleHash = *dec.UncleHash
	}
	if dec.Coinbase != nil {
		b.Coinbase = *dec.Coinbase
	}
	if dec.StateRoot != nil {
		b.StateRoot = *dec.StateRoot
	}
	if dec.TransactionTrie != nil {
		b.TransactionTrie = *dec.TransactionTrie
	}
	if dec.ReceiptTrie != nil {
		b.ReceiptTrie = *dec.ReceiptTrie
	}
	if dec.Bloom != nil {
		b.Bloom = *dec.Bloom
	}
	if dec.Difficulty != nil {
		b.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.Number != nil {
		b.Number = (*big.Int)(dec.Number)
	}
	if dec.GasLimit != nil {
		b.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasUsed != nil {
		b.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Timestamp != nil {
		b.Timestamp = (*big.Int)(dec.Timestamp)
	}
	if dec.ExtraData != nil {
		b.ExtraData = *dec.ExtraData
	}
	if dec.MixHash != nil {
		b.MixHash = *dec.MixHash
	}
	if dec.Nonce != nil {
		b.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		b.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.WithdrawalsRoot != nil {
		b.WithdrawalsRoot = *dec.WithdrawalsRoot
	}
	if dec.BlobGasUsed != nil {
		b.BlobGasUsed = (*uint64)(dec.BlobGasUsed)
	}
	if dec.ExcessBlobGas != nil {
		b.ExcessBlobGas = (*uint64)(dec.ExcessBlobGas)
	}
	if dec.BeaconRoot != nil {
		b.BeaconRoot = dec.BeaconRoot
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	return nil
}
