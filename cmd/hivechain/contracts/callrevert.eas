;;; -*- mode: asm -*-
;;; This contract is for testing two common Solidity revert encodings:
;;; Panic(uint) and Error(string).

#pragma target "constantinople"

;;; Dispatch
    push 0                      ; [offset]
    calldataload                ; [word]

    ;; if word == 0 revert with panic
    iszero                      ; [word==0]
    iszero                      ; [word!=0]
    jumpi @error                ; [word]


;;; Solidity ABI `Panic(17)`
;;; Revert data layout:
;;;
;;;     selector :: 4  ||  value :: 32
;;;
#define s_panic = .selector("Panic(uint256)")
#define panicv = 0x01 ;; == assert(false)

    push s_panic << (28*8)      ; [sel]
    push 0                      ; [offset, sel]
    mstore                      ; []
    push panicv                 ; [panicv]
    push 4                      ; [offset, panicv]
    mstore                      ; []

    push 36                     ; [length]
    push 0                      ; [offset, length]
    revert                      ; []


;;; Solidity ABI `Error(string)`
;;; Revert data layout:
;;;
;;;     selector :: 4  ||  0x20 :: 32  ||  len :: 32  ||  data :: len
;;;
#define s_error = .selector("Error(string)")
#define errmsg = "user error"
#define errmsg_word = errmsg << 255-.bitlen(errmsg)

error:
    push s_error << (28*8)      ; [sel]
    push 0                      ; [offset, sel]
    mstore                      ; []
    push 0x20                   ; [ptr]
    push 4                      ; [offset, ptr]
    mstore                      ; []
    push .bytelen(errmsg)       ; [len]
    push 36                     ; [offset, len]
    mstore                      ; []
    push errmsg_word            ; [data]
    push 68                     ; [offset, data]
    mstore                      ; []

    push 68 + .bytelen(errmsg)  ; [length]
    push 0                      ; [offset, length]
    revert
